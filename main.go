package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/gotd/td/session"
	"github.com/gotd/td/telegram"
	"github.com/gotd/td/telegram/updates"
	"github.com/gotd/td/tg"

	"telegram-env-watcher/ql"
	"telegram-env-watcher/auth"
	"telegram-env-watcher/utils"
	"telegram-env-watcher/watcher"
)

type handlerWrapper struct {
	fn func(ctx context.Context, u tg.UpdatesClass) error
}

func (h handlerWrapper) Handle(ctx context.Context, u tg.UpdatesClass) error {
	return h.fn(ctx, u)
}

func main() {
	cfg, err := utils.LoadConfig("config.json")
	if err != nil {
		log.Fatalf("‚ùå ÈÖçÁΩÆÊñá‰ª∂ËØªÂèñÂ§±Ë¥•: %v", err)
	}

	disp := tg.NewUpdateDispatcher()
	gaps := updates.New(updates.Config{
		Handler: &disp,
	})

	client := telegram.NewClient(cfg.Telegram.APIID, cfg.Telegram.APIHash, telegram.Options{
		SessionStorage: &session.FileStorage{Path: "session.json"},
		UpdateHandler:  handlerWrapper{fn: gaps.Handle},
	})

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	go func() {
		c := make(chan os.Signal, 1)
		signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)
		<-c
		cancel()
	}()

	err = client.Run(ctx, func(ctx context.Context) error {
		flow := auth.NewFlow(cfg.Telegram.Phone)
		if err := client.Auth().IfNecessary(ctx, flow); err != nil {
			return err
		}

		log.Println("‚úÖ Telegram ÁôªÂΩïÊàêÂäü")

		// Ëß£ÊûêÁõëÂê¨ÁõÆÊ†áÔºàÂä®ÊÄÅËé∑Âèñ AccessHashÔºâ
		var targets watcher.WatchTargets
		for _, ch := range cfg.Listen.Channels {
			inputCh, _, title, about, err := utils.ResolveTarget(ctx, client, ch.Username)
			if err != nil {
				log.Printf("‚ùå Ëß£ÊûêÈ¢ëÈÅì @%s Â§±Ë¥•: %v", ch.Username, err)
				continue
			}
			log.Printf("üì¢ ÁõëÂê¨È¢ëÈÅì: %s\nÁÆÄ‰ªã: %s\n", title, about)
			targets.Channels = append(targets.Channels, inputCh)
		}
		for _, us := range cfg.Listen.Users {
			_, inputUser, title, about, err := utils.ResolveTarget(ctx, client, us.Username)
			if err != nil {
				log.Printf("‚ùå Ëß£ÊûêÁî®Êà∑ @%s Â§±Ë¥•: %v", us.Username, err)
				continue
			}
			log.Printf("üí¨ ÁõëÂê¨Áî®Êà∑: %s\nÁÆÄ‰ªã: %s\n", title, about)
			targets.Users = append(targets.Users, inputUser)
		}

		if len(targets.Channels) == 0 && len(targets.Users) == 0 {
			log.Fatal("‚ùå Ê≤°ÊúâÂèØÁî®ÁöÑÁõëÂê¨ÁõÆÊ†áÔºåÁ®ãÂ∫èÈÄÄÂá∫")
		}

		// Ê≥®ÂÜåÂõûË∞ÉÂ§ÑÁêÜÂô®
		watcher.RegisterHandlers(&disp, client, cfg, &targets)

		user, err := client.Self(ctx)
		if err != nil {
			return err
		}

		log.Printf("üöÄ Telegram Â∑≤ÁôªÂΩïÔºåÁî®Êà∑ID: %d\n", user.ID)
		// ‚úÖ ÂêØÂä®Êó∂Á´ãÂç≥ Flush ‰∏äÊ¨°Êú™ÂèëÂá∫ÁöÑÈÄöÁü•
		if err := ql.FlushNotifyBuffer(cfg); err != nil {
			log.Printf("‚ö†Ô∏è ÂêØÂä®Êó∂ÈÄöÁü•ÁºìÂ≠òÂèëÈÄÅÂ§±Ë¥•: %v", err)
		}

		// ‚úÖ ÂêØÂä®ÂÆöÊó∂Âô®ÔºåÁ≠âÂæÖÊï¥ÁÇπÊâßË°å
		ql.StartNotifyScheduler(cfg)
		return gaps.Run(ctx, client.API(), user.ID, updates.AuthOptions{})
	})

	if err != nil {
		log.Fatalf("‚ùå ËøêË°åÂ§±Ë¥•: %v", err)
	}
}
